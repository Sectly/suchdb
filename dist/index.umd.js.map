{"version":3,"file":"index.umd.js","sources":["../src/index.js"],"sourcesContent":["/**\r\n* @sectly-studios/suchdb | 1.0.14 (Sun Oct 01 2023)\r\n* An simple, dependency free, require &amp; go node.js and browser database\r\n* Auhtor: Sectly (Sectly@sectly.online)\r\n* Licence: MPL-2.0, This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.\r\n* NPM: https://www.npmjs.com/package/@sectly-studios/suchdb\r\n*/\r\n\r\n// Source:\r\n(function (exports) {\n  'use strict'\r\n\r\n  function SuchDBMaster (options, isNode) {\r\n    const version = 'V1.0.14'\r\n    const suchdb = {}\r\n    let events = []\r\n\r\n    options = options || {}\r\n    isNode = isNode || false\r\n\r\n    // Core Functions:\r\n\r\n    function nodeify (defaultvalue, nodevalue) {\r\n      if (isNode) {\r\n        return nodevalue || null\r\n      } else {\r\n        return defaultvalue || null\r\n      }\r\n    }\r\n\r\n    function getoption (data, defaultvalue) {\r\n      const name = data.name || false\r\n      const base = data.base || false\r\n\r\n      if (options && typeof options === 'object' && Object.keys(options).length > 0) {\r\n        if (base) {\r\n          const checkbase = options[base] !== 'undefined' ? options[base] : (options[base] = null)\r\n\r\n          if (checkbase) {\r\n            return typeof options[base][name] !== 'undefined' ? options[base][name] : (options[base][name] = defaultvalue)\r\n          } else {\r\n            return defaultvalue\r\n          }\r\n        } else {\r\n          return typeof options[name] !== 'undefined' ? options[name] : (options[name] = defaultvalue)\r\n        }\r\n      } else {\r\n        return defaultvalue\r\n      }\r\n    }\r\n\r\n    suchdb.options = {\r\n      master: getoption({ name: 'master', base: false }, nodeify('suchdb_data', 'data')),\r\n      autosave: getoption({ name: 'autosave', base: false }, nodeify(false, true)),\r\n      autoload: getoption({ name: 'autoload', base: false }, nodeify(false, false)),\r\n      encrypt: {\r\n        enabled: getoption({ name: 'enabled', base: 'encrypt' }, nodeify(false, true)),\r\n        key: getoption({ name: 'key', base: 'encrypt' }, nodeify('SuchDB', 'SuchDB_Key'))\r\n      },\r\n      autobackup: getoption({ name: 'autobackup', base: false }, nodeify(false, false)),\r\n      logging: getoption({ name: 'logging', base: false }, nodeify(false, false)),\r\n      logging_custom: getoption({ name: 'logging_custom', base: false }, nodeify(false, false))\r\n    }\r\n\r\n    suchdb.isNode = isNode || false\r\n\r\n    if (suchdb.isNode) {\r\n      suchdb.nodeDriver = {\r\n        fs: require('fs')\r\n      }\r\n    }\r\n\r\n    let store = {}\r\n\r\n    const SuchDBEncryption = {\r\n      encrypt: function (content, key) {\r\n        const result = []\r\n        const keyLen = key.length\r\n        for (let i = 0; i < content.length; i++) {\r\n          const keyOffset = i % keyLen\r\n          const calAscii = (content.charCodeAt(i) + key.charCodeAt(keyOffset))\r\n          result.push(calAscii)\r\n        }\r\n        return JSON.stringify(result)\r\n      },\r\n\r\n      decrypt: function (content, key) {\r\n        const result = []\r\n        let str = ''\r\n        const codesArr = JSON.parse(content)\r\n        const keyLen = key.length\r\n        for (var i = 0; i < codesArr.length; i++) {\r\n          const keyOffset = i % keyLen\r\n          const calAscii = (codesArr[i] - key.charCodeAt(keyOffset))\r\n          result.push(calAscii)\r\n        }\r\n        for (var i = 0; i < result.length; i++) {\r\n          const ch = String.fromCharCode(result[i]); str += ch\r\n        }\r\n        return str\r\n      }\r\n    }\r\n\r\n    function __removeEvent (id) {\r\n      try {\r\n        events = events.filter((element) => `${element.id}` !== `${id}`)\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n\r\n    function __emit (event) {\r\n      try {\r\n        events.forEach(function (data) {\r\n          if (data.event === event) {\r\n            try {\r\n              event.callback()\r\n            } catch (error) {\r\n              console.log(error)\r\n            }\r\n\r\n            if (data.once) {\r\n              __removeEvent(data.id)\r\n            }\r\n          }\r\n        })\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n\r\n    function __log (message) {\r\n      try {\r\n        if (suchdb.options.logging) {\r\n          if (suchdb.options.logging_custom != false) {\r\n            suchdb.options.logging_custom(message)\r\n          } else {\r\n            console.log(`[SuchDB ${version} at ${new Date().toTimeString()}] ${message}`)\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n\r\n    function __backup (dataToBackup) {\r\n      try {\r\n        if (suchdb.options.autobackup) {\r\n          dataToBackup = dataToBackup || JSON.stringify({ error: 'SuchDB Data Backup Error!' })\r\n\r\n          if (suchdb.isNode) {\r\n            suchdb.nodeDriver.fs.writeFileSync(`${suchdb.options.master}.backup.suchdb`, dataToBackup)\r\n          } else {\r\n            localStorage.setItem(`backup_${suchdb.options.master}`, JSON.stringify(dataToBackup))\r\n          }\r\n        }\r\n        __log('Successfully backed up!')\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n\r\n    function __loadBackup (overwrite) {\r\n      try {\r\n        if (suchdb.options.autobackup) {\r\n          overwrite = overwrite || false\r\n\r\n          let dataFromBackup = ''\r\n\r\n          if (suchdb.isNode) {\r\n            dataFromBackup = suchdb.nodeDriver.fs.readFileSync(`${suchdb.options.master}.backup.suchdb`) || ''\r\n          } else {\r\n            dataFromBackup = localStorage.getItem(`backup_${suchdb.options.master}`) || ''\r\n          }\r\n\r\n          if (suchdb.options.encrypt.enabled && typeof suchdb.options.encrypt.key === 'string') {\r\n            dataFromBackup = SuchDBEncryption.decrypt(dataFromBackup, suchdb.options.encrypt.key)\r\n          }\r\n\r\n          if (overwrite) {\r\n            store = JSON.parse(dataFromBackup)\r\n          } else {\r\n            store = Object.assign(store, JSON.parse(dataFromBackup))\r\n          }\r\n        }\r\n        __log('Successfully loaded a backup of the database!')\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n\r\n    function __save () {\r\n      try {\r\n        let dataToSave = store || JSON.stringify({ error: 'SuchDB Data Save Error!' })\r\n\r\n        if (suchdb.options.encrypt.enabled && typeof suchdb.options.encrypt.key === 'string') {\r\n          dataToSave = SuchDBEncryption.encrypt(JSON.stringify(dataToSave), suchdb.options.encrypt.key)\r\n        }\r\n\r\n        if (suchdb.isNode) {\r\n          suchdb.nodeDriver.fs.writeFileSync(`${suchdb.options.master}.suchdb`, dataToSave)\r\n        } else {\r\n          localStorage.setItem(suchdb.options.master, JSON.stringify(dataToSave))\r\n        }\r\n\r\n        __log('Successfully saved the database!')\r\n\r\n        __backup(dataToSave)\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n\r\n    function __load (overwrite) {\r\n      try {\r\n        overwrite = overwrite || false\r\n\r\n        let dataToLoad = ''\r\n\r\n        if (suchdb.isNode) {\r\n          dataToLoad = suchdb.nodeDriver.fs.readFileSync(`${suchdb.options.master}.suchdb`) || ''\r\n\r\n          if (suchdb.options.encrypt.enabled && typeof suchdb.options.encrypt.key === 'string') {\r\n            dataToLoad = SuchDBEncryption.decrypt(dataToLoad, suchdb.options.encrypt.key)\r\n          }\r\n\r\n          if (overwrite) {\r\n            store = JSON.parse(dataToLoad)\r\n          } else {\r\n            store = Object.assign(store, JSON.parse(dataToLoad))\r\n          }\r\n        } else {\r\n          dataToLoad = localStorage.getItem(suchdb.options.master) || ''\r\n\r\n          if (suchdb.options.encrypt.enabled && typeof suchdb.options.encrypt.key === 'string') {\r\n            dataToLoad = SuchDBEncryption.decrypt(dataToLoad, suchdb.options.encrypt.key)\r\n          }\r\n\r\n          if (overwrite) {\r\n            store = JSON.parse(dataToLoad)\r\n          } else {\r\n            store = Object.assign(store, JSON.parse(dataToLoad))\r\n          }\r\n        }\r\n\r\n        __log('Successfully loaded the database!')\r\n\r\n        _save()\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n\r\n    function _save () {\r\n      if (suchdb.options.autosave) {\r\n        __save()\r\n      }\r\n    }\r\n\r\n    function Init () {\r\n      __log('Initializing...')\r\n      __emit('init')\r\n      if (suchdb.options.autoload) {\r\n        __load(true)\r\n      }\r\n      suchdb.set('SuchDB_Version', version)\r\n      __emit('ready')\r\n      __log('Initialized!')\r\n    }\r\n\r\n    // Base Functions:\r\n\r\n    /**\r\n    * Set/Add Data To The Database\r\n    *\r\n    * @param {string} key\r\n    * @param {any} value\r\n    */\r\n\r\n    suchdb.set = function (key, value) {\r\n      if (typeof key === 'string' && value) {\r\n        store[key] = JSON.stringify(value)\r\n        __log(`Updated ${key} with ${value}`)\r\n        __emit('set')\r\n      }\r\n      _save()\r\n    }\r\n\r\n    /**\r\n    * Get/Grab Data From The Database\r\n    *\r\n    * @param {string} key\r\n    */\r\n\r\n    suchdb.get = function (key) {\r\n      if (typeof key === 'string') {\r\n        const getdata = typeof store[key] !== 'undefined' ? store[key] : (store[key] = JSON.stringify('ERROR, Date Not Found!'))\r\n        __log(`Fetching ${key}...`)\r\n        __emit('get')\r\n        return JSON.parse(getdata) || { error: 'Data Fetch Failed!' }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Remove/Delete Data From The Database\r\n    *\r\n    * @param {string} key\r\n    */\r\n\r\n    suchdb.remove = function (key) {\r\n      if (typeof key === 'string') {\r\n        delete store[key]\r\n        __log(`Removed ${key}.`)\r\n        __emit('remove')\r\n      }\r\n      _save()\r\n    }\r\n\r\n    /**\r\n    * Clear/Delete All Data In The Database\r\n    */\r\n\r\n    suchdb.clear = function () {\r\n      store = {}\r\n      __log(`Cleared ${key}.`)\r\n      __emit('clear')\r\n      _save()\r\n    }\r\n\r\n    /**\r\n    * Get Database Keys\r\n    */\r\n\r\n    suchdb.keys = function () {\r\n      __log('Fetching keys...')\r\n      __emit('keys')\r\n      return Object.keys(store)\r\n    }\r\n\r\n    /**\r\n    * Get Database Values\r\n    */\r\n\r\n    suchdb.values = function () {\r\n      __log('Fetching values...')\r\n      __emit('values')\r\n      return Object.values(store)\r\n    }\r\n\r\n    /**\r\n    * Get Database Entries\r\n    */\r\n\r\n    suchdb.entries = function () {\r\n      __log('Fetching entries...')\r\n      __emit('entries')\r\n      return Object.entries(store)\r\n    }\r\n\r\n    /**\r\n    * Loop Through All Data In The Database\r\n    *\r\n    * @param {function} callback(key, value)\r\n    */\r\n\r\n    suchdb.forEach = function (callback) {\r\n      __log('Looping through the database...')\r\n      __emit('foreach')\r\n      for (const key in store) {\r\n        if (store.hasOwnProperty(key)) {\r\n          callback(key, store[key])\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Get Database Size\r\n    */\r\n\r\n    suchdb.size = function () {\r\n      __log(`The database size is ${Object.keys(store).length}`)\r\n      __emit('size')\r\n      return Object.keys(store).length\r\n    }\r\n\r\n    /**\r\n    * Check If Database Is Empty\r\n    */\r\n\r\n    suchdb.isEmpty = function () {\r\n      __log(`The database is empty: ${Object.keys(store).length == 0}`)\r\n      __emit('isempty')\r\n      return Object.keys(store).length == 0\r\n    }\r\n\r\n    /**\r\n    * Check If Database Has Data\r\n    */\r\n\r\n    suchdb.has = function (key) {\r\n      __log(`The database has data: ${Object.hasOwnProperty(store, key)}`)\r\n      __emit('has')\r\n      return Object.hasOwnProperty(store, key)\r\n    }\r\n\r\n    /**\r\n    * Lookup Data In The Database\r\n    *\r\n    * @param {any} value\r\n    */\r\n\r\n    suchdb.lookup = function (value) {\r\n      __log(`Looking up ${value}...`)\r\n      __emit('lookup')\r\n      return Object.values(store).includes(value)\r\n    }\r\n\r\n    /**\r\n    * Sort the database\r\n    *\r\n    * @param {string} key\r\n    * @param {boolean} reverse\r\n    */\r\n\r\n    suchdb.sort = function (key, reverse) {\r\n      __log(`Sorting the database in ${key} and in reverse: ${reverse}`)\r\n      __emit('sort')\r\n      store = store.sort(function (such, db) {\r\n        if (key) {\r\n          if (reverse) {\r\n            return such[key] - db[key]\r\n          } else {\r\n            return db[key] - such[key]\r\n          }\r\n        } else {\r\n          if (reverse) {\r\n            return such - db\r\n          } else {\r\n            return db - such\r\n          }\r\n        }\r\n      })\r\n      _save()\r\n    }\r\n\r\n    /**\r\n    * Find An Entry\r\n    * @param {any} query\r\n    */\r\n\r\n    suchdb.find = function (query = { name: '', value: '' }) {\r\n      __log(`Finding an entry in the database with the query of ${query}`)\r\n      __emit('find')\r\n      suchdb.forEach((key, value) => {\r\n        if (key[query.name] === query.value) {\r\n          __log(`Found ${{ key, value }}`)\r\n          return { key, value }\r\n        }\r\n      })\r\n\r\n      return null\r\n    }\r\n\r\n    suchdb.findMultiple = function (query = { name: '', value: '' }) {\r\n      __log(`Finding multiple entries in the database with the query of ${query}`)\r\n      __emit('findmultiple')\r\n      const results = []\r\n      suchdb.forEach((key, value) => {\r\n        if (key[query.name] === query.value) {\r\n          __log(`Found ${{ key, value }}`)\r\n          results.push({ key, value })\r\n        }\r\n      })\r\n\r\n      __log(`Results: ${results}`)\r\n\r\n      return results\r\n    }\r\n\r\n    /**\r\n    * Port Json To The Database\r\n    * @param {any} json\r\n    * @param {boolean} overwrite\r\n    */\r\n\r\n    suchdb.port = function (json, overwrite) {\r\n      __log(`Porting database with ${json} ovewrite: ${overwrite}`)\r\n      __emit('port')\r\n      if (overwrite) {\r\n        store = JSON.parse(json)\r\n      } else {\r\n        store = Object.assign(store, JSON.parse(json))\r\n      }\r\n      _save()\r\n    }\r\n\r\n    /**\r\n    * Save Database To:\r\n    * > localStorage\r\n    * > node-fs\r\n    */\r\n\r\n    suchdb.save = function () {\r\n      __log('Saving the database...')\r\n      __emit('save')\r\n      __save()\r\n    }\r\n\r\n    /**\r\n    * Load Database From:\r\n    * > localStorage\r\n    * > node-fs\r\n    */\r\n\r\n    suchdb.load = function (overwrite) {\r\n      __log('Loading the database...')\r\n      __emit('load')\r\n      __load(overwrite)\r\n    }\r\n\r\n    /**\r\n    * Backup Database To:\r\n    * > localStorage\r\n    * > node-fs\r\n    */\r\n\r\n    suchdb.saveBackup = function () {\r\n      __log('Saving a backup of the database...')\r\n      __emit('savebackup')\r\n      __backup(store)\r\n    }\r\n\r\n    /**\r\n    * Backup Database From:\r\n    * > localStorage\r\n    * > node-fs\r\n    */\r\n\r\n    suchdb.loadBackup = function (overwrite) {\r\n      __log(`Loading a backup of the database overwrite: ${overwrite}`)\r\n      __emit('loadbackup')\r\n      __loadBackup(overwrite)\r\n    }\r\n\r\n    /**\r\n    * Get Raw Database Data\r\n    */\r\n\r\n    suchdb.raw = function () {\r\n      __log('Getting the database in a raw format (No encryption)')\r\n      __emit('raw')\r\n      return store || {}\r\n    }\r\n\r\n    /**\r\n    * Get A List Of Database Events\r\n    */\r\n\r\n    suchdb.getEvents = function () {\r\n      __log('Fetching a list of events...')\r\n\r\n      const eventList = []\r\n      const suchdbKeys = Object.keys(suchdb) || {}\r\n\r\n      suchdbKeys.forEach(function (key) {\r\n        const eventName = `${key}`.toLowerCase()\r\n\r\n        eventList.push(eventName)\r\n      })\r\n    }\r\n\r\n    /**\r\n    * Get Database Events\r\n    */\r\n\r\n    suchdb.events = events\r\n\r\n    /**\r\n    * Create an new on event listener\r\n    */\r\n\r\n    suchdb.on = function (event, callback) {\r\n      const id = new Date().valueOf()\r\n\r\n      __log(`New on listener: ${id}`)\r\n\r\n      events.push({ event: `${event}`, id: `${id}`, callback, once: false })\r\n\r\n      return id\r\n    }\r\n\r\n    /**\r\n    * Create an new once event listener\r\n    */\r\n\r\n    suchdb.once = function (event, callback) {\r\n      const id = new Date().valueOf()\r\n\r\n      __log(`New once listener: ${id}`)\r\n\r\n      events.push({ event: `${event}`, id: `${id}`, callback, once: true })\r\n\r\n      return id\r\n    }\r\n\r\n    /**\r\n    * Delete an on/once event listener\r\n    */\r\n\r\n    suchdb.off = function (id) {\r\n      __log(`Removed listener: ${id}`)\r\n      __removeEvent(`${id}`)\r\n    }\r\n\r\n    // Main Functions:\r\n\r\n    Init()\r\n\r\n    return suchdb || null\r\n  }\r\n\r\n  /**\r\n  * SuchDB\r\n  *\r\n  * @param {Object} options\r\n  */\r\n\r\n  function Boot (options) {\r\n    let isNode = false\r\n\r\n    if (typeof window === 'undefined') {\r\n      isNode = true\r\n    }\r\n\r\n    return SuchDBMaster(options, isNode)\r\n  }\r\n\r\n  var exports = exports || {}\r\n  var module = module || {}\r\n\r\n  exports.SuchDB = function SuchDB (options) {\r\n    return Boot(options)\r\n  }\r\n\r\n  module.exports = {\r\n    SuchDB: Boot\r\n  }\n})(typeof exports === 'undefined' ? this.SuchDB = {} : exports)\r\n\r\n// SuchDB, Auhtor: Sectly (Sectly@sectly.online) | MPL-2.0 Licence.\r\n"],"names":["exports","Boot","options","isNode","window","version","suchdb","events","nodeify","defaultvalue","nodevalue","getoption","data","name","base","Object","keys","length","master","autosave","autoload","encrypt","enabled","key","autobackup","logging","logging_custom","nodeDriver","fs","require","store","SuchDBEncryption","content","result","keyLen","i","keyOffset","calAscii","charCodeAt","push","JSON","stringify","decrypt","str","codesArr","parse","String","fromCharCode","__removeEvent","id","filter","element","error","console","log","__emit","event","forEach","callback","once","__log","message","Date","toTimeString","__backup","dataToBackup","writeFileSync","localStorage","setItem","__save","dataToSave","__load","overwrite","dataToLoad","readFileSync","assign","getItem","_save","set","value","get","getdata","remove","clear","values","entries","hasOwnProperty","size","isEmpty","has","lookup","includes","sort","reverse","such","db","find","query","findMultiple","results","port","json","save","load","saveBackup","loadBackup","dataFromBackup","__loadBackup","raw","getEvents","toLowerCase","on","valueOf","off","SuchDBMaster","module","SuchDB","this"],"mappings":"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"}